import fetch from 'node-fetch';
import { CARBON_PER_KWG_GRID, CARBON_PER_KWG_RENEWABLE, CO2_GRAMS_TO_LITRES, FIRST_TIME_VIEWING_PERCENTAGE, GOOGLE_PAGESPEED_API_ENDPOINT, GREEN_FOUNDATION_API_ENDPOINT, KWG_PER_GB, PERCENTAGE_OF_DATA_LOADED_ON_SUBSEQUENT_LOAD, PERCENTAGE_OF_ENERGY_IN_DATACENTER, PERCENTAGE_OF_ENERGY_IN_TRANSMISSION_AND_END_USER, RETURNING_VISITOR_PERCENTAGE, } from './constants';
import { WebsiteCarbonCalculatorError } from './websiteCarbonCalculatorError';
/**
 * Based on https://gitlab.com/wholegrain/carbon-api-2-0/-/tree/master/
 */
export class WebsiteCarbonCalculator {
    constructor({ pagespeedApiKey }) {
        if (!pagespeedApiKey || !pagespeedApiKey.length) {
            throw new WebsiteCarbonCalculatorError("Please set the PageSpeed API Key. (i.e: new WebsiteCarbonCalculator({pagespeedApiKey: 'YOU_API_KEY'}))");
        }
        this.PAGE_SPEED_API_KEY = pagespeedApiKey;
    }
    getNetworkTraffic({ url, key, }) {
        return fetch(`${GOOGLE_PAGESPEED_API_ENDPOINT}?url=${url}&key=${key}`).then((res) => res.json());
    }
    getGreenWeb(url) {
        const parsedURL = new URL(url);
        return fetch(`${GREEN_FOUNDATION_API_ENDPOINT}/${parsedURL.host}`).then((res) => res.json());
    }
    async calculateByURL(url) {
        const normalizedURL = this.normalizeURL(url);
        const [pagespeedapi, greenweb] = await Promise.all([
            this.getNetworkTraffic({
                url: normalizedURL,
                key: this.PAGE_SPEED_API_KEY,
            }),
            this.getGreenWeb(normalizedURL),
        ]);
        if (pagespeedapi?.error) {
            throw new WebsiteCarbonCalculatorError(pagespeedapi.error.message);
        }
        const isGreenHost = greenweb?.green;
        if (!pagespeedapi?.lighthouseResult?.audits['network-requests']?.details
            ?.items) {
            throw new WebsiteCarbonCalculatorError("Sorry, traffic couldn't be estimated.");
        }
        const bytesTransferred = this.calculateTransferredBytes(pagespeedapi.lighthouseResult.audits['network-requests'].details.items);
        // Calculate the statistics as we need the co2 emissions
        const statistics = this.getStatistics(bytesTransferred);
        // pull the co2 relative to the energy
        const co2 = isGreenHost === true
            ? statistics['co2']['renewable']['grams']
            : statistics['co2']['grid']['grams'];
        return {
            url: normalizedURL,
            bytesTransferred,
            isGreenHost: isGreenHost,
            co2PerPageview: co2,
        };
    }
    calculateTransferredBytes(items) {
        return items
            .filter((item) => item.transferSize !== undefined)
            .map((item) => item.transferSize)
            .reduce((prev, next) => {
            return prev + next;
        }, 0);
    }
    getStatistics(bytes) {
        const bytesAdjusted = this.adjustDataTransfer(bytes);
        const energy = this.energyConsumption(bytesAdjusted);
        const co2Grid = this.getCo2Grid(energy);
        const co2Renewable = this.getCo2Renewable(energy);
        return {
            adjustedBytes: bytesAdjusted,
            energy: energy,
            co2: {
                grid: {
                    grams: co2Grid,
                    litres: this.co2ToLitres(co2Grid),
                },
                renewable: {
                    grams: co2Renewable,
                    litres: this.co2ToLitres(co2Renewable),
                },
            },
        };
    }
    normalizeURL(url) {
        try {
            const normalizedURL = new URL(url);
            return `${normalizedURL.protocol}//${normalizedURL.hostname}`;
        }
        catch (_) {
            throw new WebsiteCarbonCalculatorError('Ops! This is an invalid URL.');
        }
    }
    adjustDataTransfer(val) {
        return (val * RETURNING_VISITOR_PERCENTAGE +
            PERCENTAGE_OF_DATA_LOADED_ON_SUBSEQUENT_LOAD *
                val *
                FIRST_TIME_VIEWING_PERCENTAGE);
    }
    energyConsumption(bytes) {
        return bytes * (KWG_PER_GB / 1073741824);
    }
    getCo2Grid(energy) {
        return energy * CARBON_PER_KWG_GRID;
    }
    getCo2Renewable(energy) {
        return (energy * PERCENTAGE_OF_ENERGY_IN_DATACENTER * CARBON_PER_KWG_RENEWABLE +
            energy *
                PERCENTAGE_OF_ENERGY_IN_TRANSMISSION_AND_END_USER *
                CARBON_PER_KWG_GRID);
    }
    co2ToLitres(co2) {
        return co2 * CO2_GRAMS_TO_LITRES;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vic2l0ZUNhcmJvbkNhbGN1bGF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3dlYnNpdGVDYXJib25DYWxjdWxhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLFlBQVksQ0FBQztBQUUvQixPQUFPLEVBQ0wsbUJBQW1CLEVBQ25CLHdCQUF3QixFQUN4QixtQkFBbUIsRUFDbkIsNkJBQTZCLEVBQzdCLDZCQUE2QixFQUM3Qiw2QkFBNkIsRUFDN0IsVUFBVSxFQUNWLDRDQUE0QyxFQUM1QyxrQ0FBa0MsRUFDbEMsaURBQWlELEVBQ2pELDRCQUE0QixHQUM3QixNQUFNLGFBQWEsQ0FBQztBQVNyQixPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUU5RTs7R0FFRztBQUVILE1BQU0sT0FBTyx1QkFBdUI7SUFHbEMsWUFBWSxFQUFFLGVBQWUsRUFBK0I7UUFDMUQsSUFBSSxDQUFDLGVBQWUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUU7WUFDL0MsTUFBTSxJQUFJLDRCQUE0QixDQUNwQyx3R0FBd0csQ0FDekcsQ0FBQztTQUNIO1FBRUQsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGVBQWUsQ0FBQztJQUM1QyxDQUFDO0lBRU8saUJBQWlCLENBQUMsRUFDeEIsR0FBRyxFQUNILEdBQUcsR0FJSjtRQUNDLE9BQU8sS0FBSyxDQUNWLEdBQUcsNkJBQTZCLFFBQVEsR0FBRyxRQUFRLEdBQUcsRUFBRSxDQUN6RCxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVPLFdBQVcsQ0FBQyxHQUFXO1FBQzdCLE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQy9CLE9BQU8sS0FBSyxDQUNWLEdBQUcsNkJBQTZCLElBQUks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