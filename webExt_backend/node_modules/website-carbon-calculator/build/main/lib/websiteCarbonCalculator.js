"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebsiteCarbonCalculator = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const constants_1 = require("./constants");
const websiteCarbonCalculatorError_1 = require("./websiteCarbonCalculatorError");
/**
 * Based on https://gitlab.com/wholegrain/carbon-api-2-0/-/tree/master/
 */
class WebsiteCarbonCalculator {
    constructor({ pagespeedApiKey }) {
        if (!pagespeedApiKey || !pagespeedApiKey.length) {
            throw new websiteCarbonCalculatorError_1.WebsiteCarbonCalculatorError("Please set the PageSpeed API Key. (i.e: new WebsiteCarbonCalculator({pagespeedApiKey: 'YOU_API_KEY'}))");
        }
        this.PAGE_SPEED_API_KEY = pagespeedApiKey;
    }
    getNetworkTraffic({ url, key, }) {
        return node_fetch_1.default(`${constants_1.GOOGLE_PAGESPEED_API_ENDPOINT}?url=${url}&key=${key}`).then((res) => res.json());
    }
    getGreenWeb(url) {
        const parsedURL = new URL(url);
        return node_fetch_1.default(`${constants_1.GREEN_FOUNDATION_API_ENDPOINT}/${parsedURL.host}`).then((res) => res.json());
    }
    async calculateByURL(url) {
        var _a, _b, _c;
        const normalizedURL = this.normalizeURL(url);
        const [pagespeedapi, greenweb] = await Promise.all([
            this.getNetworkTraffic({
                url: normalizedURL,
                key: this.PAGE_SPEED_API_KEY,
            }),
            this.getGreenWeb(normalizedURL),
        ]);
        if (pagespeedapi === null || pagespeedapi === void 0 ? void 0 : pagespeedapi.error) {
            throw new websiteCarbonCalculatorError_1.WebsiteCarbonCalculatorError(pagespeedapi.error.message);
        }
        const isGreenHost = greenweb === null || greenweb === void 0 ? void 0 : greenweb.green;
        if (!((_c = (_b = (_a = pagespeedapi === null || pagespeedapi === void 0 ? void 0 : pagespeedapi.lighthouseResult) === null || _a === void 0 ? void 0 : _a.audits['network-requests']) === null || _b === void 0 ? void 0 : _b.details) === null || _c === void 0 ? void 0 : _c.items)) {
            throw new websiteCarbonCalculatorError_1.WebsiteCarbonCalculatorError("Sorry, traffic couldn't be estimated.");
        }
        const bytesTransferred = this.calculateTransferredBytes(pagespeedapi.lighthouseResult.audits['network-requests'].details.items);
        // Calculate the statistics as we need the co2 emissions
        const statistics = this.getStatistics(bytesTransferred);
        // pull the co2 relative to the energy
        const co2 = isGreenHost === true
            ? statistics['co2']['renewable']['grams']
            : statistics['co2']['grid']['grams'];
        return {
            url: normalizedURL,
            bytesTransferred,
            isGreenHost: isGreenHost,
            co2PerPageview: co2,
        };
    }
    calculateTransferredBytes(items) {
        return items
            .filter((item) => item.transferSize !== undefined)
            .map((item) => item.transferSize)
            .reduce((prev, next) => {
            return prev + next;
        }, 0);
    }
    getStatistics(bytes) {
        const bytesAdjusted = this.adjustDataTransfer(bytes);
        const energy = this.energyConsumption(bytesAdjusted);
        const co2Grid = this.getCo2Grid(energy);
        const co2Renewable = this.getCo2Renewable(energy);
        return {
            adjustedBytes: bytesAdjusted,
            energy: energy,
            co2: {
                grid: {
                    grams: co2Grid,
                    litres: this.co2ToLitres(co2Grid),
                },
                renewable: {
                    grams: co2Renewable,
                    litres: this.co2ToLitres(co2Renewable),
                },
            },
        };
    }
    normalizeURL(url) {
        try {
            const normalizedURL = new URL(url);
            return `${normalizedURL.protocol}//${normalizedURL.hostname}`;
        }
        catch (_) {
            throw new websiteCarbonCalculatorError_1.WebsiteCarbonCalculatorError('Ops! This is an invalid URL.');
        }
    }
    adjustDataTransfer(val) {
        return (val * constants_1.RETURNING_VISITOR_PERCENTAGE +
            constants_1.PERCENTAGE_OF_DATA_LOADED_ON_SUBSEQUENT_LOAD *
                val *
                constants_1.FIRST_TIME_VIEWING_PERCENTAGE);
    }
    energyConsumption(bytes) {
        return bytes * (constants_1.KWG_PER_GB / 1073741824);
    }
    getCo2Grid(energy) {
        return energy * constants_1.CARBON_PER_KWG_GRID;
    }
    getCo2Renewable(energy) {
        return (energy * constants_1.PERCENTAGE_OF_ENERGY_IN_DATACENTER * constants_1.CARBON_PER_KWG_RENEWABLE +
            energy *
                constants_1.PERCENTAGE_OF_ENERGY_IN_TRANSMISSION_AND_END_USER *
                constants_1.CARBON_PER_KWG_GRID);
    }
    co2ToLitres(co2) {
        return co2 * constants_1.CO2_GRAMS_TO_LITRES;
    }
}
exports.WebsiteCarbonCalculator = WebsiteCarbonCalculator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vic2l0ZUNhcmJvbkNhbGN1bGF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3dlYnNpdGVDYXJib25DYWxjdWxhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDREQUErQjtBQUUvQiwyQ0FZcUI7QUFTckIsaUZBQThFO0FBRTlFOztHQUVHO0FBRUgsTUFBYSx1QkFBdUI7SUFHbEMsWUFBWSxFQUFFLGVBQWUsRUFBK0I7UUFDMUQsSUFBSSxDQUFDLGVBQWUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUU7WUFDL0MsTUFBTSxJQUFJLDJEQUE0QixDQUNwQyx3R0FBd0csQ0FDekcsQ0FBQztTQUNIO1FBRUQsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGVBQWUsQ0FBQztJQUM1QyxDQUFDO0lBRU8saUJBQWlCLENBQUMsRUFDeEIsR0FBRyxFQUNILEdBQUcsR0FJSjtRQUNDLE9BQU8sb0JBQUssQ0FDVixHQUFHLHlDQUE2QixRQUFRLEdBQUcsUUFBUSxHQUFHLEVBQUUsQ0FDekQsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFTyxXQUFXLENBQUMsR0FBVztRQUM3QixNQUFNLFNBQVMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMvQixPQUFPLG9CQUFLLENBQ1YsR0FBRyx5Q0FBNkIsSUFBSSxTQUFTLENBQUMsSUFBSSxFQUFFLENBQ3JELENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRU0sS0FBSyxDQUFDLGNBQWMsQ0FBQyxHQUFXOztRQUNyQyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTdDLE1BQU0s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